@page "/reservationspage"

@using FlightBookingSystem.Components.ViewModel
@using FlightBookingSystem.Components.Model

<style>
    /*Add CSS styling here*/
    header {
        padding: 10px;
        text-align: center;
    }

    .row {
        align-items: center;
        margin-bottom: 10px;
    }

    label {
        font-weight: bold;
    }
</style>

<div class="container">
    <div class="row">
        <div>
            <header class="align-content-center">
                <h3>Reservation Finder</h3>
            </header>
        </div>
        <div class="row">

            <!-- Select dropdown for Code -->
            <div class="col-sm-3">
                <label for="flightCode">Code: </label>
                <select name="flightCode" class="form-control" @bind="flightCode">
                    @if (activeReservations.Count == 0)
                    {
                        <option value="Any">Any</option>
                    }
                    else
                    {
                        <option value="Any">Any</option>

                        @foreach (Reservation r in activeReservations)
                        {
                            <option value="@r.FlightCode">@r.FlightCode</option>
                        }
                    }
                </select>
            </div>

            <!-- Select dropdown for Airline -->
            <div class="col-sm-3">
                <label for="airline">Airline: </label>
                <select name="airline" class="form-control" @bind="airline">
                    @if (activeReservations.Count == 0)
                    {
                        <option value="Any">Any</option>
                    }
                    else
                    {
                        <option value="Any">Any</option>

                        @foreach (Reservation r in activeReservations)
                        {
                            <option value="@r.Airline">@r.Airline</option>
                        }
                    }
                </select>
            </div>

            <!-- Select dropdown for Name -->
            <div class="col-sm-3">
                <label for="Name">Name: </label>
                <select name="Name" class="form-control" @bind="name">
                    @if (activeReservations.Count == 0)
                    {
                        <option value="Any">Any</option>
                    }
                    else
                    {
                        <option value="Any">Any</option>

                        @foreach (Reservation r in activeReservations)
                        {
                            <option value="@r.Name">@r.Name</option>
                        }
                    }
                </select>
            </div>

            <!-- Find Reservations Button -->
            <div class="col-sm-3">
                <button class="btn btn-primary form-control" @onclick="FindReservations">Find reservations</button>
            </div>

        </div>
    </div>

    <div class="row">
        <header class="align-content-center">
            <h3>Reservations</h3>
        </header>
        <div class="row">
            <label for="fliteredFlights">Flight Search Result:</label>
            <select name="fliteredFlights" class="form-control" @onchange="fillForm">
                @if (filteredReservations == null || filteredReservations.Count == 0)
                {
                    <option>No reservations available</option>
                }
                else
                {
                    <option>Select a flight from this list</option>
                    @foreach (Reservation r in filteredReservations)
                    {
                        <option value="@r.FlightCode">@r.FlightCode , @r.Airline, @r.Name, @r.Day, @r.Time, @r.Cost</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="row">
        <!-- Add UI code for Search Reservation Section -->
        <header class="align-content-center">
            <h3>Reserve</h3>
        </header>

        <div class="form-group">
            <label for="flightCode">Flight code:</label>
            <input type="text" id="flightCode" class="form-control" value="@flightCode" readonly placeholder="Flight" />

            <label for="airLine">Airline:</label>
            <input type="text" id="airLine" class="form-control" value="@airline" readonly placeholder="Airline" />

            <label for="day">Day:</label>
            <input type="text" id="day" class="form-control" value="@day" readonly placeholder="Day" />

            <label for="time">Time:</label>
            <input type="text" id="time" class="form-control" value="@time" readonly placeholder="Time" />

            <label for="cost">Cost:</label>
            <input type="text" id="cost" class="form-control" value="@cost" readonly placeholder="0" />

            <label for="name">Name:</label>
            <input type="text" id="name" class="form-control" @bind="name" placeholder="Name" />

            <label for="citizenship">Citizenship:</label>
            <input type="text" id="citizenship" class="form-control" @bind="citizenship" placeholder="Citizenship" />

            <div>
                <label for="status">Status:</label>
                <select>
                    <option value="=Active">Active</option>
                    <option value="=Inactive">Inactive</option>
                </select>
            </div>
            <div class="col-sm-10 p-3">
                <button type="button" class="btn btn-primary" @onclick="UpdateReservation">Update</button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

</div>

@code {
    private FlightManager fm = FlightManager.INSTANCE;

    private string srcValue;
    private string destValue;
    private string dayValue = Utils.ANY;
    private List<string> airports = FlightManager.GetAiportCodeList();
    private List<Reservation> activeReservations = new(); // Stores all reservations
    private List<Reservation> filteredReservations = new(); // Stores filtered reservations

    //holds flight details
    private string flightCode;
    private string airline;
    private string day;
    private string time;
    private decimal cost;

    //holds flight details used for validation
    private string name;
    private string citizenship;
    private string errorMessage;
    private string successMessage;

    private void FindReservations()
    {
        //filter reservations based on the selected criteria (flightCode, airline, and name)
        filteredReservations = activeReservations
            .Where(r => (flightCode == "Any" || r.FlightCode == flightCode)
                && (airline == "Any" || r.Airline == airline)
                && (name == "Any" || r.Name == name))
            .ToList();

        if (filteredReservations.Count == 0)
        {
            errorMessage = "No reservations found.";
        }
        else
        {
            errorMessage = string.Empty;
        }
    }

    private void fillForm(ChangeEventArgs e)
    {
        /* When user select any flight from the Flight Search Result selection menu, this method will be called.
         * Inside this method add code to bind the flight details to input boxes in Reservation section
        */

        //get the flightId chosen by the user from the dropdown
        string selectedFlightId = e.Value?.ToString();

        //verifies if flight has been selected
        if (string.IsNullOrEmpty(selectedFlightId) || selectedFlightId == "Select a flight from this list")
        {
            flightCode = string.Empty;
            airline = string.Empty;
            day = string.Empty;
            time = string.Empty;
            cost = 0;
            errorMessage = "Please select a flight.";
            return;
        }

        //get the reservation that was selected
        var selectedReservation = filteredReservations.FirstOrDefault(r => r.FlightCode == selectedFlightId);

        if (selectedReservation != null)
        {
            //updates the properties we made above with the details from the selectedReservation
            flightCode = selectedReservation.FlightCode;
            airline = selectedReservation.Airline;
            day = selectedReservation.Day;
            time = selectedReservation.Time;
            cost = selectedReservation.Cost;
            name = selectedReservation.Name;
            citizenship = selectedReservation.Citizenship;
            errorMessage = string.Empty; //returns the error message back to empty
        }
    }

    //method to load reservations into the Reservations list
    private void LoadReservations()
    {

        //create a relative path to the reservations.csv
        var reservationsFilePath = "C:\\Users\\codyt\\Desktop\\SAIT Fall 2024\\OOP2 Fall 2024\\Final\\FlightBookingSystem\\Resources\\Raw\\reservations.csv";

        if (File.Exists(reservationsFilePath))
        {
            //clears the list before adding more reservations to avoid duplicates
            activeReservations.Clear();

            var lines = File.ReadAllLines(reservationsFilePath);
            foreach (var line in lines)
            {
                //splits up parts of data and inserts it into the reservations list and defines each part to the properties
                var parts = line.Split(',');
                if (parts.Length >= 7)
                {
                    Reservation reservations = new Reservation
                        {
                            FlightCode = parts[0],
                            Airline = parts[1],
                            Day = parts[2],
                            Time = parts[3],
                            Cost = decimal.Parse(parts[4]),
                            Name = parts[5],
                            Citizenship = parts[6]
                        };

                    activeReservations.Add(reservations);
                }
            }
        }
    }

    //runs the loadReservations method when the component loads
    protected override void OnInitialized()
    {
        LoadReservations();
    }

    //added function for updating reservation
    private void UpdateReservation()
    {
        try
        {
            var reservationsFilePath = "C:\\Users\\codyt\\Desktop\\SAIT Fall 2024\\OOP2 Fall 2024\\Final\\FlightBookingSystem\\Resources\\Raw\\reservations.csv";

            //read lines in reservations
            var lines = System.IO.File.ReadAllLines(reservationsFilePath);

            //for each word in reservations we will split it with a comma
            for (int i = 0; i < lines.Length; i++)
            {
                var columns = lines[i].Split(',');

                if (columns[0] == flightCode) //when the flightCode matches the one we wanna update we will continue 
                {
                    //update using new name and citizenship entered in the text box.
                    columns[5] = name;
                    columns[6] = citizenship;

                    //join flight data back together
                    lines[i] = string.Join(",", columns);
                    break;
                }
            }

            // Write updated lines back to the file
            System.IO.File.WriteAllLines(reservationsFilePath, lines);

            successMessage = "Reservation updated successfully.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}